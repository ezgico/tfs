{
   "tasks":[
      {
         "environment":{
            
         },
         "displayName":"Check for Pipeline Tags",
         "alwaysRun":false,
         "continueOnError":false,
         "condition":"succeeded()",
         "enabled":true,
         "timeoutInMinutes":0,
         "inputs":{
            "targetType":"inline",
            "filePath":"",
            "arguments":"",
            "script":"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n\nfunction Invoke-ADRequest {\n  param(\n    [String]\n    $Endpoint,\n    [String]\n    $Method,\n    [String]\n    $ApiVersion = \"5.0\",\n    $Body,\n    $Params = \"\"\n  )\n\n  $uri = \"https://next-tfs/HeadOffice/$($Endpoint)?api-version=$($ApiVersion)$($Params)\"\n\n  # It is obviously usually a very bad idea to store credentials in a script, but this allows this script to be portable. This PAT token has read-only access to just build and release\n  # pipeline objects.\n  # PS if you've come here because this script is causing you issues, this token would expire 18/11/2021.\n\n  $AzureDevOpsPAT = \"nj7enxgfifn7hhhcbl7cexqwgfcp4yewpj7mwytdz3wyculjpu4q\"\n  $AzureDevOpsAuthenicationHeader = @{Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(\":$($AzureDevOpsPAT)\")) }\n\n  $invRestMethParams = @{\n    Uri         = $uri\n    Method      = $Method\n    ContentType = 'application/json'\n    Body        = $Body\n    Headers     = $AzureDevOpsAuthenicationHeader\n  }\n  $Result = Invoke-RestMethod @invRestMethParams\n\n  return $result\n}\n\n\n$deploymentInputs = (Invoke-ADRequest -Endpoint \"$($ENV:BUILD_PROJECTNAME)/_apis/release/definitions/$($ENV:RELEASE_DEFINITIONID)\" -Method \"GET\").environments.deployPhases.deploymentInput\n\nforeach($input in $deploymentInputs) {\n  if($input.tags.length -eq 0) {\n    Write-Host \"##vso[task.logissue type=error]There are tags missing on this release pipeline, to avoid deploying to all servers in the pool, this release will be cancelled.\"\n    exit 1\n  }\n}",
            "errorActionPreference":"stop",
            "failOnStderr":"false",
            "ignoreLASTEXITCODE":"false",
            "pwsh":"false",
            "workingDirectory":""
         },
         "task":{
            "id":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
            "versionSpec":"2.*",
            "definitionType":"task"
         }
      },
      {
         "environment":{
            
         },
         "displayName":"Create Website and App Pool",
         "alwaysRun":false,
         "continueOnError":false,
         "condition":"succeeded()",
         "enabled":true,
         "timeoutInMinutes":0,
         "inputs":{
            "EnableIIS":"false",
            "IISDeploymentType":"IISWebsite",
            "ActionIISWebsite":"CreateOrUpdateWebsite",
            "ActionIISApplicationPool":"CreateOrUpdateAppPool",
            "StartStopWebsiteName":"",
            "WebsiteName":"$(WebsiteName)",
            "WebsitePhysicalPath":"$(WebsitePhysicalPath)\\$(WebsiteName)",
            "WebsitePhysicalPathAuth":"WebsiteUserPassThrough",
            "WebsiteAuthUserName":"",
            "WebsiteAuthUserPassword":"",
            "AddBinding":"false",
            "Protocol":"http",
            "IPAddress":"All Unassigned",
            "Port":"80",
            "ServerNameIndication":"false",
            "HostNameWithOutSNI":"",
            "HostNameWithHttp":"",
            "HostNameWithSNI":"",
            "SSLCertThumbPrint":"",
            "Bindings":"{\"bindings\":[{\"protocol\":\"https\",\"ipAddress\":\"All Unasigned\",\"port\":\"$(Port)\",\"hostname\":\"\",\"sslThumbprint\":\"$(CertificateThumbprint)\",\"sniFlag\":false}]}",
            "CreateOrUpdateAppPoolForWebsite":"true",
            "ConfigureAuthenticationForWebsite":"false",
            "AppPoolNameForWebsite":"$(AppPoolName)",
            "DotNetVersionForWebsite":"v4.0",
            "PipeLineModeForWebsite":"Integrated",
            "AppPoolIdentityForWebsite":"SpecificUser",
            "AppPoolUsernameForWebsite":"$(AppPoolUsername)",
            "AppPoolPasswordForWebsite":"$(AppPoolPassword)",
            "AnonymousAuthenticationForWebsite":"false",
            "BasicAuthenticationForWebsite":"false",
            "WindowsAuthenticationForWebsite":"true",
            "ParentWebsiteNameForVD":"",
            "VirtualPathForVD":"",
            "PhysicalPathForVD":"%SystemDrive%\\inetpub\\wwwroot",
            "VDPhysicalPathAuth":"VDUserPassThrough",
            "VDAuthUserName":"",
            "VDAuthUserPassword":"",
            "ParentWebsiteNameForApplication":"",
            "VirtualPathForApplication":"",
            "PhysicalPathForApplication":"%SystemDrive%\\inetpub\\wwwroot",
            "ApplicationPhysicalPathAuth":"ApplicationUserPassThrough",
            "ApplicationAuthUserName":"",
            "ApplicationAuthUserPassword":"",
            "CreateOrUpdateAppPoolForApplication":"false",
            "AppPoolNameForApplication":"",
            "DotNetVersionForApplication":"v4.0",
            "PipeLineModeForApplication":"Integrated",
            "AppPoolIdentityForApplication":"ApplicationPoolIdentity",
            "AppPoolUsernameForApplication":"",
            "AppPoolPasswordForApplication":"",
            "AppPoolName":"$(AppPoolName)",
            "DotNetVersion":"v4.0",
            "PipeLineMode":"Integrated",
            "AppPoolIdentity":"ApplicationPoolIdentity",
            "AppPoolUsername":"$(AppPoolUsername)",
            "AppPoolPassword":"$(AppPoolPassword)",
            "StartStopRecycleAppPoolName":"",
            "AppCmdCommands":""
         },
         "task":{
            "id":"1b2aec60-dc49-11e6-9b76-63056e018cac",
            "versionSpec":"0.*",
            "definitionType":"task"
         }
      },
      {
         "environment":{
            
         },
         "displayName":"Create Virtual Application",
         "alwaysRun":false,
         "continueOnError":false,
         "condition":"succeeded()",
         "enabled":false,
         "timeoutInMinutes":0,
         "inputs":{
            "EnableIIS":"false",
            "IISDeploymentType":"IISWebApplication",
            "ActionIISWebsite":"CreateOrUpdateWebsite",
            "ActionIISApplicationPool":"CreateOrUpdateAppPool",
            "StartStopWebsiteName":"",
            "WebsiteName":"$(WebsiteName)",
            "WebsitePhysicalPath":"%SystemDrive%\\inetpub\\wwwroot",
            "WebsitePhysicalPathAuth":"WebsiteUserPassThrough",
            "WebsiteAuthUserName":"",
            "WebsiteAuthUserPassword":"",
            "AddBinding":"false",
            "Protocol":"http",
            "IPAddress":"All Unassigned",
            "Port":"80",
            "ServerNameIndication":"false",
            "HostNameWithOutSNI":"",
            "HostNameWithHttp":"",
            "HostNameWithSNI":"",
            "SSLCertThumbPrint":"",
            "Bindings":"",
            "CreateOrUpdateAppPoolForWebsite":"false",
            "ConfigureAuthenticationForWebsite":"false",
            "AppPoolNameForWebsite":"",
            "DotNetVersionForWebsite":"v4.0",
            "PipeLineModeForWebsite":"Integrated",
            "AppPoolIdentityForWebsite":"ApplicationPoolIdentity",
            "AppPoolUsernameForWebsite":"",
            "AppPoolPasswordForWebsite":"",
            "AnonymousAuthenticationForWebsite":"false",
            "BasicAuthenticationForWebsite":"false",
            "WindowsAuthenticationForWebsite":"true",
            "ParentWebsiteNameForVD":"",
            "VirtualPathForVD":"",
            "PhysicalPathForVD":"%SystemDrive%\\inetpub\\wwwroot",
            "VDPhysicalPathAuth":"VDUserPassThrough",
            "VDAuthUserName":"",
            "VDAuthUserPassword":"",
            "ParentWebsiteNameForApplication":"$(WebsiteName)",
            "VirtualPathForApplication":"/$(VirtualApplication)",
            "PhysicalPathForApplication":"$(WebsitePhysicalPath)\\$(VirtualApplication)",
            "ApplicationPhysicalPathAuth":"ApplicationUserPassThrough",
            "ApplicationAuthUserName":"",
            "ApplicationAuthUserPassword":"",
            "CreateOrUpdateAppPoolForApplication":"true",
            "AppPoolNameForApplication":"$(AppPoolName)",
            "DotNetVersionForApplication":"v4.0",
            "PipeLineModeForApplication":"Integrated",
            "AppPoolIdentityForApplication":"SpecificUser",
            "AppPoolUsernameForApplication":"$(AppPoolUsername)",
            "AppPoolPasswordForApplication":"$(AppPoolPassword)",
            "AppPoolName":"$(AppPoolName)",
            "DotNetVersion":"v4.0",
            "PipeLineMode":"Integrated",
            "AppPoolIdentity":"ApplicationPoolIdentity",
            "AppPoolUsername":"$(AppPoolUsername)",
            "AppPoolPassword":"$(AppPoolPassword)",
            "StartStopRecycleAppPoolName":"",
            "AppCmdCommands":"unlock config /section:anonymousAuthentication\nunlock config /section:windowsAuthentication\n\nset config \"$(WebsiteName)/$(VirtualApplication)\" -section:system.webServer/security/authentication/anonymousAuthentication /enabled:\"False\" /userName:\"IUSR\" /commit:apphost\nset config \"$(WebsiteName)/$(VirtualApplication)\" -section:system.webServer/security/authentication/windowsAuthentication /enabled:\"True\" /commit:apphost\n\nset apppool \"$(AppPoolName)\" -processModel.maxProcesses:$(WorkerProcesses)"
         },
         "task":{
            "id":"1b2aec60-dc49-11e6-9b76-63056e018cac",
            "versionSpec":"0.*",
            "definitionType":"task"
         }
      },
      {
         "environment":{
            
         },
         "displayName":"Extract Web Package",
         "alwaysRun":false,
         "continueOnError":false,
         "condition":"succeeded()",
         "enabled":true,
         "timeoutInMinutes":0,
         "inputs":{
            "targetType":"inline",
            "filePath":"",
            "arguments":"",
            "script":"$ZipPath = Get-ChildItem -Recurse \"$($env:WebPackage)\"\n\n$ZipPath | Expand-Archive -Force\n\n$AppName1 = $env:WebPackage.replace(\"**\\\",\"\").split('/')[$env:WebPackage.replace(\"**\\\",\"\").split('/').length -1].split('.')\n$DirName = $AppName1[0..($AppName1.length-2)] -join '.'\n\nWrite-Host \"##vso[task.setvariable variable=DirName]$DirName\"\nWrite-Host \"##vso[task.setvariable variable=ZipPath]$ZipPath\"",
            "errorActionPreference":"stop",
            "failOnStderr":"false",
            "ignoreLASTEXITCODE":"false",
            "pwsh":"false",
            "workingDirectory":""
         },
         "task":{
            "id":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
            "versionSpec":"2.*",
            "definitionType":"task"
         }
      },
      {
         "environment":{
            
         },
         "displayName":"Apply transforms *.$(Environment).config => *.config",
         "alwaysRun":false,
         "continueOnError":false,
         "condition":"succeeded()",
         "enabled":true,
         "timeoutInMinutes":0,
         "inputs":{
            "workingFolder":"$(DirName)",
            "transforms":"*.$(Environment).config => *.config"
         },
         "task":{
            "id":"98012758-c053-475d-9d6a-fd0773c39e09",
            "versionSpec":"3.*",
            "definitionType":"task"
         }
      },
      {
         "environment":{
            
         },
         "displayName":"Remove Original Web Package",
         "alwaysRun":false,
         "continueOnError":false,
         "condition":"succeeded()",
         "enabled":true,
         "timeoutInMinutes":0,
         "inputs":{
            "targetType":"inline",
            "filePath":"",
            "arguments":"",
            "script":"Get-ChildItem -Recurse Web.config | cat\n\n# parameters.xml seems to be created with msbuild during build, causes tokens to be replaced during msdeploy, get rid of it.\n# $ParamFile = Get-ChildItem -Recurse parameters.xml\n# Set-Content -Path $ParamFile -Value \"<parameters></parameters>\"\n\n\n$env:ZipPath | Remove-Item\n\n",
            "errorActionPreference":"stop",
            "failOnStderr":"false",
            "ignoreLASTEXITCODE":"false",
            "pwsh":"false",
            "workingDirectory":""
         },
         "task":{
            "id":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
            "versionSpec":"2.*",
            "definitionType":"task"
         }
      },
      {
         "environment":{
            
         },
         "displayName":"Archive Web Package",
         "alwaysRun":false,
         "continueOnError":false,
         "condition":"succeeded()",
         "enabled":true,
         "timeoutInMinutes":0,
         "inputs":{
            "rootFolderOrFile":"$(DirName)",
            "includeRootFolder":"false",
            "archiveType":"zip",
            "tarCompression":"gz",
            "archiveFile":"$(ZipPath)",
            "replaceExistingArchive":"false",
            "verbose":"true",
            "quiet":"false"
         },
         "task":{
            "id":"d8b84976-e99a-4b86-b885-4849694435b0",
            "versionSpec":"2.*",
            "definitionType":"task"
         }
      },
      {
         "environment":{
            
         },
         "displayName":"Deploy",
         "alwaysRun":false,
         "continueOnError":false,
         "condition":"succeeded()",
         "enabled":true,
         "timeoutInMinutes":0,
         "inputs":{
            "WebSiteName":"$(WebsiteName)",
            "VirtualApplication":"",
            "Package":"$(WebPackage)",
            "SetParametersFile":"",
            "RemoveAdditionalFilesFlag":"false",
            "ExcludeFilesFromAppDataFlag":"false",
            "TakeAppOfflineFlag":"true",
            "AdditionalArguments":"",
            "XmlTransformation":"false",
            "XmlVariableSubstitution":"false",
            "JSONFiles":""
         },
         "task":{
            "id":"1b467810-6725-4b6d-accd-886174c09bba",
            "versionSpec":"0.*",
            "definitionType":"task"
         }
      }
   ],
   "runsOn":[
      "DeploymentGroup"
   ],
   "revision":4,
   "createdBy":{
      "displayName":"Attfield, James",
      "id":"47dd03f7-fdab-4172-80c2-cb50baf2444d",
      "uniqueName":"NEXT-PLC\\JATTFIELD"
   },
   "createdOn":"2022-06-07T11:49:36.247Z",
   "modifiedBy":{
      "displayName":"Attfield, James",
      "id":"47dd03f7-fdab-4172-80c2-cb50baf2444d",
      "uniqueName":"NEXT-PLC\\JATTFIELD"
   },
   "modifiedOn":"2022-06-09T10:35:11.380Z",
   "comment":"",
   "id":"8411bf34-0520-4993-a528-f0affb1323d0",
   "name":"Deploy to IIS (.NET Framework) - Custom Credentials - Top Level Website",
   "version":{
      "major":1,
      "minor":0,
      "patch":0,
      "isTest":false
   },
   "iconUrl":"/_static/tfs/Dev17.M153.3/_content/icon-meta-task.png",
   "friendlyName":"Deploy to IIS (.NET Framework) - Custom Credentials - Top Level Website",
   "description":"This task group will create the Top Level website and deploy the application to it (no virtual application)",
   "category":"Deploy",
   "definitionType":"metaTask",
   "author":"Ewen, Ben",
   "demands":[
      
   ],
   "groups":[
      
   ],
   "inputs":[
      {
         "aliases":[
            
         ],
         "options":{
            
         },
         "properties":{
            
         },
         "name":"AppPoolName",
         "label":"AppPoolName",
         "defaultValue":"$(AppPoolName)",
         "required":true,
         "type":"string",
         "helpMarkDown":"Provide the name of the IIS application pool to create or update.",
         "groupName":""
      },
      {
         "aliases":[
            
         ],
         "options":{
            
         },
         "properties":{
            
         },
         "name":"AppPoolPassword",
         "label":"AppPoolPassword",
         "defaultValue":"$(AppPoolPassword)",
         "required":true,
         "type":"string",
         "helpMarkDown":"Provide the password for custom account. <br/>The best practice is to create a variable in the build or release pipeline, and mark it as 'Secret' to secure it, and then use it here, like '$(userCredentials)'. <br> Note: Special characters in password are interpreted as per <a href=\"https://go.microsoft.com/fwlink/?linkid=843470\">command-line arguments</a>",
         "groupName":""
      },
      {
         "aliases":[
            
         ],
         "options":{
            
         },
         "properties":{
            
         },
         "name":"AppPoolUsername",
         "label":"AppPoolUsername",
         "defaultValue":"$(AppPoolUsername)",
         "required":true,
         "type":"string",
         "helpMarkDown":"Provide the username of the custom account that you want to use.",
         "groupName":""
      },
      {
         "aliases":[
            
         ],
         "options":{
            
         },
         "properties":{
            
         },
         "name":"CertificateThumbprint",
         "label":"CertificateThumbprint",
         "defaultValue":"",
         "required":false,
         "type":"string",
         "helpMarkDown":"",
         "groupName":""
      },
      {
         "aliases":[
            
         ],
         "options":{
            
         },
         "properties":{
            
         },
         "name":"Environment",
         "label":"Environment",
         "defaultValue":"$(Environment)",
         "required":true,
         "type":"string",
         "helpMarkDown":"The name of the environment, e.g. DEV, UAT, QA",
         "groupName":""
      },
      {
         "aliases":[
            
         ],
         "options":{
            
         },
         "properties":{
            
         },
         "name":"Port",
         "label":"Port",
         "defaultValue":"$(Port)",
         "required":true,
         "type":"string",
         "helpMarkDown":"",
         "groupName":""
      },
      {
         "aliases":[
            
         ],
         "options":{
            
         },
         "properties":{
            
         },
         "name":"VirtualApplication",
         "label":"VirtualApplication",
         "defaultValue":"$(VirtualApplication)",
         "required":false,
         "type":"string",
         "helpMarkDown":"",
         "groupName":""
      },
      {
         "aliases":[
            
         ],
         "options":{
            
         },
         "properties":{
            
         },
         "name":"WebsiteName",
         "label":"WebsiteName",
         "defaultValue":"$(WebsiteName)",
         "required":true,
         "type":"string",
         "helpMarkDown":"Provide the name of the parent Website under which the application will be created or updated.",
         "groupName":""
      },
      {
         "aliases":[
            
         ],
         "options":{
            
         },
         "properties":{
            
         },
         "name":"WebsitePhysicalPath",
         "label":"WebsitePhysicalPath",
         "defaultValue":"$(WebsitePhysicalPath)",
         "required":true,
         "type":"string",
         "helpMarkDown":"",
         "groupName":""
      },
      {
         "aliases":[
            
         ],
         "options":{
            
         },
         "properties":{
            
         },
         "name":"WorkerProcesses",
         "label":"WorkerProcesses",
         "defaultValue":"$(WorkerProcesses)",
         "required":true,
         "type":"string",
         "helpMarkDown":"",
         "groupName":""
      }
   ],
   "satisfies":[
      
   ],
   "sourceDefinitions":[
      
   ],
   "dataSourceBindings":[
      
   ],
   "instanceNameFormat":"Task group: Deploy to IIS (.NET Framework) - Custom Credentials - Top Level Website $($ApiVersion)",
   "preJobExecution":{
      
   },
   "execution":{
      
   },
   "postJobExecution":{
      
   }
}